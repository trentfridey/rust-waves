{"version":3,"sources":["js/index.js"],"names":["canvas","document","getElementById","rustCanvas","Canvas","new","width","height","ctx","getContext","stepBtn","addEventListener","step","FPSCounter","frameCounter","debug","hoveredColor","pick","event","destination","x","layerX","target","offsetLeft","y","layerY","offsetTop","pixel","getImageData","data","r","g","b","a","rgba_to_hue","args","normalize","v","normalized","Array","from","map","xMax","Math","max","xMin","min","chroma","rgba","style","background","textContent","slice","toFixed","evt","frameCount","innerText","imagePtr","image","imageArray","Uint8ClampedArray","rust","wasm","memory","buffer","imageData","ImageData","putImageData","t0","t1","duration","id","render","performance","now","run","floor","requestAnimationFrame","start","running","innerHTML","backgroundColor","cancelAnimationFrame"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["import rust, { Canvas } from '../crate/Cargo.toml' \n\nlet canvas = document.getElementById('canvas');\nconst rustCanvas = Canvas.new(canvas.width, canvas.height);\nconst width = rustCanvas.width();\nconst height = rustCanvas.height();\nlet ctx = canvas.getContext('2d');\n\nconst stepBtn = document.getElementById('step-btn')\nstepBtn.addEventListener('click', step)\n\n\n// Debug tools --------------------------------------------\n\nconst FPSCounter = document.getElementById('fps')\nconst frameCounter = document.getElementById('frameCount')\n\nconst debug = () => {\n    // let debugCanvas = document.getElementById('test-coloring');\n    // let debugCtx = debugCanvas.getContext('2d');\n    // const testPtr = rustCanvas.test();\n    // const testArray = new Uint8ClampedArray(rust.wasm.memory.buffer, testPtr, 4 * height * width);\n    // let testData = new ImageData(testArray, width, height);\n    // debugCtx.putImageData(testData, 0, 0);\n}\n\n// const debugBtn = document.getElementById('debug-btn')\n// debugBtn.addEventListener('click', debug)\n\n\nconst hoveredColor = document.getElementById('hoveredColor');\n\nfunction pick(event, destination) {\n    const x = event.layerX - event.target.offsetLeft;\n    const y = event.layerY - event.target.offsetTop;\n    const pixel = ctx.getImageData(x, y, 1, 1);\n    const data = pixel.data;\n    const [r,g,b,a] = data\n    // console.log(event)\n\n    const rgba_to_hue = (args) => {\n        const normalize = v => v / 255\n        const normalized = Array.from(args).map(v => normalize(v))\n        const xMax = Math.max(...normalized)\n        const xMin = Math.min(...normalized)\n        const [r,g,b] = normalized\n        const chroma = xMax - xMin\n        if (chroma === 0) return 0\n        if (xMax === r) return 60*(g-b)/chroma\n        if (xMax === g) return 60*(2 + (b-r)/chroma)\n        if (xMax === b) return 60*(4 + (r-g)/chroma)\n    }\n\n    const rgba = `rgba(${r}, ${g}, ${b}, ${a / 255})`;\n    destination.style.background = rgba;\n    destination.textContent = `${rgba_to_hue(data.slice(0,3)).toFixed(0)} degrees`;\n\n    return rgba;\n}\n\ncanvas.addEventListener('mousemove', function(evt) {\n    pick(evt, hoveredColor)\n})\n\n// ---------------------------------------------------------------\n\nfunction step () {\n    rustCanvas.step(0, false);\n    frameCount++\n    frameCounter.innerText = frameCount\n    // norm.innerText = rustCanvas.norm();\n    const imagePtr = rustCanvas.image();\n    const imageArray = new Uint8ClampedArray(rust.wasm.memory.buffer, imagePtr, 4 * height * width);\n    let imageData = new ImageData(imageArray, width, height);\n    ctx.putImageData(imageData, 0, 0);\n}\n\nlet t0 = 0;\nlet t1 = 1;\nlet duration = t0 - t1;\nlet frameCount = 0\nlet id = null;\n\n\nfunction render(){\n    id = null;\n    t0 = performance.now()\n    step()\n    t1 = performance.now()\n    duration = t1 - t0\n    run();\n};\n\nfunction run (){\n    if(frameCount % 10 === 0) FPSCounter.innerText = Math.floor(1e3/duration)\n    if (!id) { id = requestAnimationFrame(render) }\n}\n\nlet start = document.getElementById('start');\nlet running = false;\nstart.addEventListener('click', () => {\n    running = !running;\n    if(running) { \n        run(); \n        start.innerHTML = 'Stop';\n        start.style.backgroundColor = 'red';\n    }\n    else { \n        cancelAnimationFrame(id); \n        id = null; \n        start.innerHTML = 'Start';\n        start.style.backgroundColor = 'greenyellow';\n    }\n});\n"]}